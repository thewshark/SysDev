-- TRIGGERS *****************************************************************************

--********************* tr_MSS_msdcp_insert ************************************
DROP TRIGGER [dbo].[tr_MSS_msdcp_insert]
GO

CREATE TRIGGER [dbo].[tr_MSS_msdcp_insert] ON [dbo].[msdcp]  FOR INSERT  AS SET NOCOUNT ON

DECLARE @tpd VARCHAR(10)
DECLARE @ser VARCHAR(10)
DECLARE @docNum INT
DECLARE @vld decimal(12, 3)
DECLARE @nmc nVARCHAR(35)
DECLARE @dtc nVARCHAR(8)
DECLARE @ban nVARCHAR(10)
DECLARE @vlc decimal(12, 3)
DECLARE @dep nVARCHAR(1)
DECLARE @vlo decimal(12, 3)
DECLARE @tip nVARCHAR(30)
DECLARE @PHC_tip nVARCHAR(20)

SELECT @tpd=DCPTPD, @ser=DCPSER, @docNum=DCPNDC, @vld=DCPVLD, @nmc=DCPNMC, @dtc=DCPDTC, @ban=DCPBAN, @vlc=DCPVLC, @dep=DCPDEP, @vlo=DCPVLO, @tip=DCPTIP FROM inserted

IF @tpd <> '' AND @ser <> '' AND @docNum > 0
BEGIN
	UPDATE MSDCC SET DCPVLD=@vld, DCPNMC=@nmc, DCPDTC=@dtc, DCPBAN=@ban, DCPVLC=@vlc, DCPDEP=@dep, DCPVLO=@vlo, DCPTIP=@tip, DCPTOT=@vld+@vlc+@vlo WHERE DCCTPD LIKE @tpd AND DCCSER LIKE @ser AND DCCNDC = @docNum
END
GO
--********************* // tr_MSS_msdcp_insert ************************************

--********************* tr_MSS_msrcp_insert ************************************
DROP TRIGGER [dbo].[tr_MSS_msrcp_insert]
GO

CREATE TRIGGER [dbo].[tr_MSS_msrcp_insert] ON [dbo].[msrcp]  FOR INSERT  AS SET NOCOUNT ON

DECLARE @tpd VARCHAR(10)
DECLARE @ser VARCHAR(10)
DECLARE @docNum INT
DECLARE @vld decimal(12, 3)
DECLARE @nmc nVARCHAR(35)
DECLARE @dtc nVARCHAR(8)
DECLARE @ban nVARCHAR(10)
DECLARE @vlc decimal(12, 3)
DECLARE @dep nVARCHAR(1)
DECLARE @vlo decimal(12, 3)
DECLARE @tip nVARCHAR(30)
DECLARE @lin INT

SELECT @tpd=RCPTPD, @ser=RCPSER, @docNum=RCPNDC, @vld=RCPVLD, @nmc=RCPNMC, @dtc=RCPDTC, @ban=RCPBAN, @vlc=RCPVLC, @dep=RCPDEP, @vlo=RCPVLO, @tip=RCPTIP, @lin=RCPLIN FROM inserted

IF @tpd <> '' AND @ser <> '' AND @docNum > 0 AND @lin = 1
BEGIN
	UPDATE MSRCC SET RCPVLD=@vld, RCPNMC=@nmc, RCPDTC=@dtc, RCPBAN=@ban, RCPVLC=@vlc, RCPDEP=@dep, RCPVLO=@vlo, RCPTIP=@tip, RCPTOT=@vld+@vlc+@vlo WHERE RCCTPD LIKE @tpd AND RCCSER LIKE @ser AND RCCNDC = @docNum
END
GO
--********************* // tr_MSS_msrcp_insert ************************************

--********************* tr_MSS_msdct_insert ************************************
DROP TRIGGER [dbo].[tr_MSS_msdct_insert]
GO

CREATE TRIGGER [dbo].[tr_MSS_msdct_insert] ON [dbo].[MSDCT]  FOR INSERT  AS SET NOCOUNT ON

DECLARE @DCLEXR VARCHAR(30)
DECLARE @DCLTPD VARCHAR(10)
DECLARE @DCLSER VARCHAR(10)
DECLARE @DCLNDC INTEGER
DECLARE @DCLLIN INTEGER
DECLARE @DCLART VARCHAR(60)
DECLARE @DCLQTD REAL
DECLARE @DCLPRU REAL
DECLARE @DCLTXI REAL
DECLARE @DCLTDC REAL
DECLARE @DCLTD2 REAL
DECLARE @DCLVLD REAL
DECLARE @DCLDTE VARCHAR(8)
DECLARE @DCLUND VARCHAR(8)
DECLARE @DCLOBS VARCHAR(500)
DECLARE @DCLTPL VARCHAR(1)
DECLARE @DCLCMP REAL
DECLARE @DCLLGR REAL
DECLARE @DCLALT REAL
DECLARE @DCLPES REAL
DECLARE @DCLTCL VARCHAR(1)
DECLARE @DCLTD3 REAL
DECLARE @DCLTD4 REAL
DECLARE @DCLI1T REAL
DECLARE @DCLREQ REAL
DECLARE @DCLDSA VARCHAR(100)
DECLARE @DCLQT2 REAL
DECLARE @DCLUN2 VARCHAR(8)
DECLARE @DCLVD1 REAL
DECLARE @DCLIVI VARCHAR(1)
DECLARE @DCLVDL REAL
DECLARE @DCLVDC REAL
DECLARE @DCLI1V REAL
DECLARE @DCLPNT REAL
DECLARE @DCLPRO REAL
DECLARE @DCLD1O REAL
DECLARE @DCLD2O REAL
DECLARE @DCLD3O REAL
DECLARE @DCLD4O REAL
DECLARE @DCLPCU DECIMAL(12,6)
DECLARE @DCLACP VARCHAR(1)
DECLARE @DCLMTD VARCHAR(30)
DECLARE @DCLSTM VARCHAR(1)
DECLARE @DCLSU1 VARCHAR(100)
DECLARE @DCLSU2 VARCHAR(100)
DECLARE @DCLSU3 VARCHAR(100)
DECLARE @DCLI2T REAL
DECLARE @DCLI3T REAL
DECLARE @DCLI2V REAL
DECLARE @DCLI3V REAL
DECLARE @DCLCAC VARCHAR(60)
DECLARE @DCLDAC VARCHAR(100)
DECLARE @DCLSU4 VARCHAR(500)
DECLARE @DCLSU5 VARCHAR(500)
DECLARE @DCLSU6 INTEGER
DECLARE @DCLSU7 INTEGER
DECLARE @DCLSU8 REAL
DECLARE @DCLSU9 REAL
DECLARE @DCLPET REAL
DECLARE @DCLVND VARCHAR(50)
DECLARE @DCLSYNCR VARCHAR(1)
DECLARE @DCLTIPO VARCHAR(1)
DECLARE @DCLTERM INTEGER
DECLARE @DCLOEX VARCHAR(30)
DECLARE @DCLOTP VARCHAR(10)
DECLARE @DCLOSR VARCHAR(10)
DECLARE @DCLOND NUMERIC(19,0)
DECLARE @DCLOLN NUMERIC(19,0)
DECLARE @DCLSRV VARCHAR(1)
DECLARE @DCLIVA VARCHAR(30)
DECLARE @DCLPLI VARCHAR(500)
DECLARE @DCLQTM NUMERIC(19,6)
DECLARE @DCLPSI NUMERIC(19,6)
DECLARE @DCLACL VARCHAR(2000)

DECLARE @DCTEXR VARCHAR(30)
DECLARE @DCTTPD VARCHAR(10)
DECLARE @DCTSER VARCHAR(10)
DECLARE @DCTNDC NUMERIC(19,0)
DECLARE @DCTLIN NUMERIC(19,0)
DECLARE @DCTLIL NUMERIC(19,0)
DECLARE @DCTQTD REAL
DECLARE @DCTOBS VARCHAR(500)
DECLARE @DCTLOT VARCHAR(60)
DECLARE @DCTDTL VARCHAR(8)
DECLARE @DCTDVL VARCHAR(8)
DECLARE @DCTNSR VARCHAR(60)

DECLARE @DCCTSF VARCHAR(2)

SELECT @DCTEXR=DCTEXR, @DCTTPD=DCTTPD, @DCTSER=DCTSER, @DCTNDC=DCTNDC, @DCTLIN=DCTLIN, @DCTLIL=DCTLIL, @DCTQTD=DCTQTD, @DCTOBS=DCTOBS, @DCTLOT=DCTLOT, @DCTDTL=DCTDTL, @DCTDVL=DCTDVL, @DCTNSR=DCTNSR FROM Inserted
SELECT @DCCTSF=DCCTSF FROM MSDCC WHERE DCCEXR = @DCTEXR AND DCCTPD = @DCTTPD AND DCCSER = @DCTSER AND DCCNDC = @DCTNDC

IF @DCTLIL = 1
BEGIN
	IF @DCCTSF = 'GT'
		UPDATE MSDCL SET DCLLIN = CAST(CAST(@DCTLIN AS VARCHAR) + CAST(@DCTLIL * 100 AS VARCHAR) AS INT), DCLQTD = @DCTQTD, DCTQTD = @DCTQTD, DCTOBS = @DCTOBS, DCTLOT = @DCTLOT, DCTDTL = @DCTDTL, DCTDVL = @DCTDVL, DCTNSR = @DCTNSR WHERE DCLEXR = @DCTEXR AND DCLTPD = @DCTTPD AND DCLSER = @DCTSER AND DCLNDC = @DCTNDC AND DCLLIN = @DCTLIN
	ELSE
		UPDATE MSDCL SET DCTQTD = @DCTQTD, DCTOBS = @DCTOBS, DCTLOT = @DCTLOT, DCTDTL = @DCTDTL, DCTDVL = @DCTDVL, DCTNSR = @DCTNSR WHERE DCLEXR = @DCTEXR AND DCLTPD = @DCTTPD AND DCLSER = @DCTSER AND DCLNDC = @DCTNDC AND DCLLIN = @DCTLIN
END
ELSE
BEGIN
	IF @DCCTSF <> 'GT'
	BEGIN
		RAISERROR ('Erro de validação de dados, existem vários lotes por linha, deve verificar nas configurações do Backoffice o parametro "Um lote por linha" nas configurações avançadas de documentos.', 16, -1)
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
		SELECT
				@DCLEXR = DCLEXR,
				@DCLTPD = DCLTPD,
				@DCLSER = DCLSER,
				@DCLNDC = DCLNDC,
				@DCLLIN = DCLLIN,
				@DCLART = DCLART,
				@DCLQTD = DCLQTD,
				@DCLPRU = DCLPRU,
				@DCLTXI = DCLTXI,
				@DCLTDC = DCLTDC,
				@DCLTD2 = DCLTD2,
				@DCLVLD = DCLVLD,
				@DCLDTE = DCLDTE,
				@DCLUND = DCLUND,
				@DCLOBS = DCLOBS,
				@DCLTPL = DCLTPL,
				@DCLCMP = DCLCMP,
				@DCLLGR = DCLLGR,
				@DCLALT = DCLALT,
				@DCLPES = DCLPES,
				@DCLTCL = DCLTCL,
				@DCLTD3 = DCLTD3,
				@DCLTD4 = DCLTD4,
				@DCLI1T = DCLI1T,
				@DCLREQ = DCLREQ,
				@DCLDSA = DCLDSA,
				@DCLQT2 = DCLQT2,
				@DCLUN2 = DCLUN2,
				@DCLVD1 = DCLVD1,
				@DCLIVI = DCLIVI,
				@DCLVDL = DCLVDL,
				@DCLVDC = DCLVDC,
				@DCLI1V = DCLI1V,
				@DCLPNT = DCLPNT,
				@DCLPRO = DCLPRO,
				@DCLD1O = DCLD1O,
				@DCLD2O = DCLD2O,
				@DCLD3O = DCLD3O,
				@DCLD4O = DCLD4O,
				@DCLPCU = DCLPCU,
				@DCLACP = DCLACP,
				@DCLMTD = DCLMTD,
				@DCLSTM = DCLSTM,
				@DCLSU1 = DCLSU1,
				@DCLSU2 = DCLSU2,
				@DCLSU3 = DCLSU3,
				@DCLI2T = DCLI2T,
				@DCLI3T = DCLI3T,
				@DCLI2V = DCLI2V,
				@DCLI3V = DCLI3V,
				@DCLCAC = DCLCAC,
				@DCLDAC = DCLDAC,
				@DCLSU4 = DCLSU4,
				@DCLSU5 = DCLSU5,
				@DCLSU6 = DCLSU6,
				@DCLSU7 = DCLSU7,
				@DCLSU8 = DCLSU8,
				@DCLSU9 = DCLSU9,
				@DCLPET = DCLPET,
				@DCLVND = DCLVND,
				@DCLSYNCR = DCLSYNCR,
				@DCLTIPO = DCLTIPO,
				@DCLTERM = DCLTERM,
				@DCLOEX = DCLOEX,
				@DCLOTP = DCLOTP,
				@DCLOSR = DCLOSR,
				@DCLOND = DCLOND,
				@DCLOLN = DCLOLN,
				@DCLSRV = DCLSRV,
				@DCLIVA = DCLIVA,
				@DCLPLI = DCLPLI,
				@DCLQTM = DCLQTM,
				@DCLPSI = DCLPSI,
				@DCLACL = DCLACL
		FROM MSDCL WHERE DCLEXR = @DCTEXR AND DCLTPD = @DCTTPD AND DCLSER = @DCTSER AND DCLNDC = @DCTNDC AND DCLLIN = CAST(CAST(@DCTLIN AS VARCHAR) + CAST(1 * 100 AS VARCHAR) AS INT)
	
		INSERT INTO MSDCL(DCLEXR,DCLTPD, DCLSER, DCLNDC, DCLLIN, DCLART, DCLQTD, DCLPRU, DCLTXI, DCLTDC, DCLTD2, DCLVLD,
					DCLDTE, DCLUND, DCLOBS, DCLTPL, DCLCMP, DCLLGR, DCLALT, DCLPES, DCLTCL, DCLTD3, DCLTD4, DCLI1T,
					DCLREQ, DCLDSA, DCLQT2, DCLUN2, DCLVD1, DCLIVI, DCLVDL, DCLVDC, DCLI1V, DCLPNT, DCLPRO, DCLD1O,
					DCLD2O, DCLD3O, DCLD4O, DCLPCU, DCLACP, DCLMTD, DCLSTM, DCLSU1, DCLSU2, DCLSU3, DCLI2T, DCLI3T,
					DCLI2V, DCLI3V, DCLCAC, DCLDAC, DCLSU4, DCLSU5, DCLSU6, DCLSU7, DCLSU8, DCLSU9, DCLPET, DCLVND,
					DCLSYNCR, DCLTIPO, DCLTERM, DCTQTD, DCTOBS, DCTLOT, DCTDTL, DCTDVL, DCTNSR,
					DCLOEX,DCLOTP,DCLOSR,DCLOND,DCLOLN,DCLSRV,DCLIVA,DCLPLI,DCLQTM,DCLPSI,DCLACL)
				VALUES(@DCLEXR,@DCLTPD, @DCLSER, @DCLNDC, CAST(CAST(@DCTLIN AS VARCHAR) + CAST(@DCTLIL * 100 AS VARCHAR) AS INT), @DCLART, @DCTQTD, @DCLPRU, @DCLTXI,
					@DCLTDC, @DCLTD2, @DCLVLD, @DCLDTE, @DCLUND, @DCLOBS, @DCLTPL, @DCLCMP, @DCLLGR, @DCLALT, @DCLPES,
					@DCLTCL, @DCLTD3, @DCLTD4, @DCLI1T, @DCLREQ, @DCLDSA, @DCLQT2, @DCLUN2, @DCLVD1, @DCLIVI, @DCLVDL,
					@DCLVDC, @DCLI1V, @DCLPNT, @DCLPRO, @DCLD1O, @DCLD2O, @DCLD3O, @DCLD4O, @DCLPCU, @DCLACP, @DCLMTD,
					@DCLSTM, @DCLSU1, @DCLSU2, @DCLSU3, @DCLI2T, @DCLI3T, @DCLI2V, @DCLI3V, @DCLCAC, @DCLDAC, @DCLSU4,
					@DCLSU5, @DCLSU6, @DCLSU7, @DCLSU8, @DCLSU9, @DCLPET, @DCLVND, @DCLSYNCR, @DCLTIPO, @DCLTERM,
					@DCTQTD, @DCTOBS, @DCTLOT, @DCTDTL, @DCTDVL, @DCTNSR,
					@DCLOEX,@DCLOTP,@DCLOSR,@DCLOND,@DCLOLN,@DCLSRV,@DCLIVA,@DCLPLI,@DCLQTM,@DCLPSI,@DCLACL) 
	END
END
GO

DROP TRIGGER [dbo].[tr_MSSRCC_UPDATE]
GO
--********************* // tr_MSS_msdct_insert ************************************

--********************* tr_MSSRCC_UPDATE ************************************
CREATE TRIGGER [dbo].[tr_MSSRCC_UPDATE] ON [dbo].[MSRCC]  AFTER INSERT  AS SET NOCOUNT ON

DECLARE @tpd VARCHAR(10)
DECLARE @ser VARCHAR(10)
DECLARE @docNum INT

SELECT @tpd = RCCTPD, @ser = RCCSER, @docnum = RCCNDC FROM inserted

UPDATE MSRCC SET RCCDTA2 = RCCDTA WHERE rcctpd = @tpd AND rccser = @ser AND rccndc = @docnum
GO
--********************* // tr_MSSRCC_UPDATE ************************************

--********************* tr_MSSRCL_UPDATE ************************************
DROP TRIGGER [dbo].[tr_MSSRCL_UPDATE]
GO

CREATE TRIGGER [dbo].[tr_MSSRCL_UPDATE] ON [dbo].[MSRCL]  AFTER INSERT  AS SET NOCOUNT ON

DECLARE @tpd VARCHAR(10)
DECLARE @ser VARCHAR(10)
DECLARE @docNum INT
DECLARE @linha INT

SELECT @tpd = RCLTPD, @ser = RCLSER, @docnum = RCLNDC, @linha=RCLLIN FROM inserted

UPDATE MSRCL SET RCLDDO2 = RCLDDO WHERE rcltpd = @tpd AND rclser = @ser AND rclndc = @docnum AND rcllin=@linha
GO
--********************* // tr_MSSRCL_UPDATE ************************************

--********************* tr_MSSDCC_UPDATE ************************************
DROP TRIGGER [dbo].[tr_MSSDCC_UPDATE]
GO

CREATE TRIGGER [dbo].[tr_MSSDCC_UPDATE] ON [dbo].[MSDCC]  AFTER INSERT  AS SET NOCOUNT ON

UPDATE MSDCC SET MSDCC.DCCDTA2 = MSDCC.DCCDTA
FROM INSERTED
WHERE INSERTED.DCCEXR = MSDCC.DCCEXR AND INSERTED.DCCTPD = MSDCC.DCCTPD AND INSERTED.DCCSER = MSDCC.DCCSER AND INSERTED.DCCNDC = MSDCC.DCCNDC
GO
--********************* // tr_MSSDCC_UPDATE ************************************

--********************* TR_MSSCLI_CHECK_DUPLICATE ************************************
DROP TRIGGER TR_MSSCLI_CHECK_DUPLICATE 
GO

CREATE TRIGGER TR_MSSCLI_CHECK_DUPLICATE ON MSCLI INSTEAD OF INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @Cod VARCHAR(30)
	DECLARE @CliCount INT

	SELECT @Cod = CLICOD FROM INSERTED
	SELECT @CliCount = Count(*) FROM MSCLI(nolock) WHERE CLICOD = @Cod
	IF @CliCount > 0
		DELETE FROM MSCLI WHERE CLICOD = @Cod

	INSERT INTO MSCLI SELECT * FROM INSERTED
END
GO
--********************* // TR_MSSCLI_CHECK_DUPLICATE ************************************

--********************* TR_MSSAGD_CHECK_DUPLICATE ************************************
DROP TRIGGER TR_MSSAGD_CHECK_DUPLICATE 
GO

CREATE TRIGGER TR_MSSAGD_CHECK_DUPLICATE ON MSAGD INSTEAD OF INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @Stamp VARCHAR(30)
	DECLARE @AgdCount INT

	SELECT @Stamp = AGDSTP FROM INSERTED
	SELECT @AgdCount = Count(*) FROM MSAGD(nolock) WHERE AGDSTP = @Stamp
	IF @AgdCount > 0
		DELETE FROM MSAGD WHERE AGDSTP = @Stamp

	INSERT INTO MSAGD SELECT * FROM INSERTED
END
GO
--********************* // TR_MSSAGD_CHECK_DUPLICATE ************************************

--********************* TR_MSSLCE_CHECK_DUPLICATE ************************************
DROP TRIGGER TR_MSSLCE_CHECK_DUPLICATE 
GO

CREATE TRIGGER TR_MSSLCE_CHECK_DUPLICATE ON MSLCE INSTEAD OF INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @CodCli VARCHAR(30)
	DECLARE @CodLce VARCHAR(20)
	DECLARE @LceCount INT

	SELECT @CodCli = LCECOD, @CodLce = LCELCE FROM INSERTED
	SELECT @LceCount = Count(*) FROM MSLCE(nolock) WHERE LCECOD = @CodCli AND LCELCE = @CodLce
	IF @LceCount > 0
		DELETE FROM MSLCE WHERE LCECOD = @CodCli AND LCELCE = @CodLce

	INSERT INTO MSLCE SELECT * FROM INSERTED
END
GO
--********************* // TR_MSSLCE_CHECK_DUPLICATE ************************************

--********************* TR_MSSCRT_CHECK_DUPLICATE ************************************
DROP TRIGGER TR_MSSCRT_CHECK_DUPLICATE 
GO

CREATE TRIGGER TR_MSSCRT_CHECK_DUPLICATE ON MSCRT INSTEAD OF INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @CodRota VARCHAR(30)
	DECLARE @CodSRota VARCHAR(30)
	DECLARE @CodCli VARCHAR(30)
	DECLARE @CrtCount INT

	SELECT @CodRota = CRTROT, @CodSRota = CRTSBT, @CodCli = CRTCLI FROM INSERTED
	SELECT @CrtCount = Count(*) FROM MSCRT(nolock) WHERE CRTROT = @CodRota AND CRTSBT = @CodSRota AND CRTCLI = @CodCli
	IF @CrtCount > 0
		DELETE FROM MSCRT WHERE CRTROT = @CodRota AND CRTSBT = @CodSRota AND CRTCLI = @CodCli

	INSERT INTO MSCRT SELECT * FROM INSERTED
END
GO
--********************* // TR_MSSCRT_CHECK_DUPLICATE ************************************

--********************* TR_MSSCNT_CHECK_DUPLICATE ************************************
DROP TRIGGER TR_MSSCNT_CHECK_DUPLICATE 
GO

CREATE TRIGGER TR_MSSCNT_CHECK_DUPLICATE ON MSCNT INSTEAD OF INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @CodCli VARCHAR(30)
	DECLARE @CodLce VARCHAR(20)
	DECLARE @CntId VARCHAR(50)
	DECLARE @CntCount INT

	SELECT @CodCli = CNTCLI, @CodLce = CNTLCE, @CntId = CNTCID FROM INSERTED
	SELECT @CntCount = Count(*) FROM MSCNT(nolock) WHERE CNTCLI = @CodCli AND CNTLCE = @CodLce AND CNTCID = @CntId
	IF @CntCount > 0
		DELETE FROM MSCNT WHERE CNTCLI = @CodCli AND CNTLCE = @CodLce AND CNTCID = @CntId

	INSERT INTO MSCNT SELECT * FROM INSERTED
END
GO
--********************* // TR_MSSCNT_CHECK_DUPLICATE ************************************

--********************* TR_MSSDEC_CHECK_DUPLICATE ************************************
DROP TRIGGER TR_MSSDEC_CHECK_DUPLICATE 
GO

CREATE TRIGGER TR_MSSDEC_CHECK_DUPLICATE ON MSDEC INSTEAD OF INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @DocExr VARCHAR(30)
	DECLARE @DocTpd VARCHAR(10)
	DECLARE @DocSer VARCHAR(10)
	DECLARE @DocNum INT
	DECLARE @DecCount INT

	SELECT @DocExr = DECEXR, @DocTpd = DECTPD, @DocSer = DECSER, @DocNum = DECNDC FROM INSERTED
	SELECT @DecCount = Count(*) FROM MSDEC(nolock) WHERE DECEXR = @DocExr AND DECTPD = @DocTpd AND DECSER = @DocSer AND DECNDC = @DocNum
	IF @DecCount > 0
		DELETE FROM MSDEC WHERE DECEXR = @DocExr AND DECTPD = @DocTpd AND DECSER = @DocSer AND DECNDC = @DocNum

	INSERT INTO MSDEC SELECT * FROM INSERTED
END
GO
--********************* // TR_MSSDEC_CHECK_DUPLICATE ************************************

--********************* TR_MSSDED_CHECK_DUPLICATE ************************************
DROP TRIGGER TR_MSSDED_CHECK_DUPLICATE 
GO

CREATE TRIGGER TR_MSSDED_CHECK_DUPLICATE ON MSDED INSTEAD OF INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @DocExr VARCHAR(30)
	DECLARE @DocTpd VARCHAR(10)
	DECLARE @DocSer VARCHAR(10)
	DECLARE @DocNum INT
	DECLARE @DocLin INT
	DECLARE @DedCount INT

	SELECT @DocExr = DEDEXR, @DocTpd = DEDTPD, @DocSer = DEDSER, @DocNum = DEDNDC, @DocLin = DEDLIN FROM INSERTED
	SELECT @DedCount = Count(*) FROM MSDED(nolock) WHERE DEDEXR = @DocExr AND DEDTPD = @DocTpd AND DEDSER = @DocSer AND DEDNDC = @DocNum AND DEDLIN = @DocLin
	IF @DedCount > 0
		DELETE FROM MSDED WHERE DEDEXR = @DocExr AND DEDTPD = @DocTpd AND DEDSER = @DocSer AND DEDNDC = @DocNum AND DEDLIN = @DocLin

	INSERT INTO MSDED SELECT * FROM INSERTED
END
GO
--********************* // TR_MSSDED_CHECK_DUPLICATE ************************************

--********************* TR_MSSDET_CHECK_DUPLICATE ************************************
DROP TRIGGER TR_MSSDET_CHECK_DUPLICATE 
GO

CREATE TRIGGER TR_MSSDET_CHECK_DUPLICATE ON MSDET INSTEAD OF INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @DocExr VARCHAR(30)
	DECLARE @DocTpd VARCHAR(10)
	DECLARE @DocSer VARCHAR(10)
	DECLARE @DocNum INT
	DECLARE @DocLin INT
	DECLARE @DocLil INT
	DECLARE @DetCount INT

	SELECT @DocExr = DETEXR, @DocTpd = DETTPD, @DocSer = DETSER, @DocNum = DETNDC, @DocLin = DETLIN, @DocLil = DETLIL FROM INSERTED
	SELECT @DETCount = Count(*) FROM MSDET(nolock) WHERE DETEXR = @DocExr AND DETTPD = @DocTpd AND DETSER = @DocSer AND DETNDC = @DocNum AND DETLIN = @DocLin AND DETLIL = @DocLil
	IF @DETCount > 0
		DELETE FROM MSDET WHERE DETEXR = @DocExr AND DETTPD = @DocTpd AND DETSER = @DocSer AND DETNDC = @DocNum AND DETLIN = @DocLin AND DETLIL = @DocLil

	INSERT INTO MSDET SELECT * FROM INSERTED
END
GO
--********************* // TR_MSSDED_CHECK_DUPLICATE ************************************

--********************* TR_MSSDIA_CHECK_DUPLICATE ************************************
DROP TRIGGER TR_MSSDIA_CHECK_DUPLICATE 
GO

CREATE TRIGGER TR_MSSDIA_CHECK_DUPLICATE ON MSDIA INSTEAD OF INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @DataIni VARCHAR(8)
	DECLARE @HoraIni VARCHAR(6)
	DECLARE @Terminal INT
	
	DECLARE @DiaCount INT

	SELECT @DataIni = DIADTI, @HoraIni = DIAHRI, @Terminal = DIATERM FROM INSERTED
	SELECT @DiaCount = Count(*) FROM MSDIA(nolock) WHERE DIADTI = @DataIni AND DIAHRI = @HoraIni AND DIATERM = @Terminal
	IF @DiaCount > 0
		DELETE FROM MSDIA WHERE DIADTI = @DataIni AND DIAHRI = @HoraIni AND DIATERM = @Terminal

	INSERT INTO MSDIA SELECT * FROM INSERTED
END
GO
--********************* // TR_MSSDIA_CHECK_DUPLICATE ************************************

--********************* TR_MSSEQC_CHECK_DUPLICATE ************************************
DROP TRIGGER TR_MSSEQC_CHECK_DUPLICATE 
GO

CREATE TRIGGER TR_MSSEQC_CHECK_DUPLICATE ON MSEQC INSTEAD OF INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @EqcCod VARCHAR(30)
	
	DECLARE @EqcCount INT

	SELECT @EqcCod = EQCCOD FROM INSERTED
	SELECT @EqcCount = Count(*) FROM MSEQC(nolock) WHERE EQCCOD = @EqcCod
	IF @EqcCount > 0
		DELETE FROM MSEQC WHERE EQCCOD = @EqcCod

	INSERT INTO MSEQC SELECT * FROM INSERTED
END
GO
--********************* // TR_MSSEQC_CHECK_DUPLICATE ************************************

--********************* TR_MSSEQP_CHECK_DUPLICATE ************************************
DROP TRIGGER TR_MSSEQP_CHECK_DUPLICATE 
GO

CREATE TRIGGER TR_MSSEQP_CHECK_DUPLICATE ON MSEQP INSTEAD OF INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @EqpCod VARCHAR(30)
	
	DECLARE @EqpCount INT

	SELECT @EqpCod = EQPCOD FROM INSERTED
	SELECT @EqpCount = Count(*) FROM MSEQP WHERE EQPCOD = @EqpCod
	IF @EqpCount > 0
		DELETE FROM MSEQP WHERE EQPCOD = @EqpCod

	INSERT INTO MSEQP SELECT * FROM INSERTED
END
GO
--********************* // TR_MSSEQP_CHECK_DUPLICATE ************************************

--********************* TR_MSSRTV_CHECK_DUPLICATE ************************************
DROP TRIGGER [TR_MSSRTV_CHECK_DUPLICATE] 
GO

CREATE TRIGGER [dbo].[TR_MSSRTV_CHECK_DUPLICATE] ON [dbo].[MSRTV] INSTEAD OF INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @RTVEXR VARCHAR(30)
	DECLARE @RTVSER VARCHAR(10)
	DECLARE @RTVNDC INT
	DECLARE @RTVCount INT
	SELECT @RTVEXR = RTVEXR, @RTVSER = RTVSER, @RTVNDC = RTVNDC FROM INSERTED

	SELECT @RTVCount = Count(*) FROM MSRTV(nolock) WHERE RTVEXR = @RTVEXR AND RTVSER = @RTVSER AND RTVNDC = @RTVNDC
	IF @RTVCount > 0
		DELETE FROM MSRTV WHERE RTVEXR = @RTVEXR AND RTVSER = @RTVSER AND RTVNDC = @RTVNDC

	INSERT INTO MSRTV SELECT * FROM INSERTED
END
GO
--********************* // TR_MSSRTV_CHECK_DUPLICATE ************************************

--********************* TR_MSSSBD_CHECK_DUPLICATE ************************************
DROP TRIGGER TR_MSSSBD_CHECK_DUPLICATE 
GO

CREATE TRIGGER TR_MSSSBD_CHECK_DUPLICATE ON MSSBD INSTEAD OF INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @SbdStamp VARCHAR(30)
	
	DECLARE @SbdCount INT

	SELECT @SbdStamp = SBDSTP FROM INSERTED
	SELECT @SbdCount = Count(*) FROM MSSBD(nolock) WHERE SBDSTP = @SbdStamp
	IF @SbdCount > 0
		DELETE FROM MSSBD WHERE SBDSTP = @SbdStamp

	INSERT INTO MSSBD SELECT * FROM INSERTED
END
GO
--********************* // TR_MSSSBD_CHECK_DUPLICATE ************************************

--********************* TR_MSSSCL_CHECK_DUPLICATE ************************************
DROP TRIGGER TR_MSSSCL_CHECK_DUPLICATE 
GO

CREATE TRIGGER TR_MSSSCL_CHECK_DUPLICATE ON MSSCL INSTEAD OF INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @SclExr VARCHAR(30)
	DECLARE @SclSer VARCHAR(10)
	DECLARE @SclNum INT
	DECLARE @SclLin INT
	
	DECLARE @SclCount INT

	SELECT @SclExr = SCLEXR, @SclSer = SCLSER, @SclNum = SCLNDC, @SclLin = SCLLIN FROM INSERTED
	SELECT @SclCount = Count(*) FROM MSSCL(nolock) WHERE SCLEXR = @SclExr AND SCLSER = @SclSer AND SCLNDC = @SclNum AND SCLLIN = @SclLin
	IF @SclCount > 0
		DELETE FROM MSSCL WHERE SCLEXR = @SclExr AND SCLSER = @SclSer AND SCLNDC = @SclNum AND SCLLIN = @SclLin

	INSERT INTO MSSCL SELECT * FROM INSERTED
END
GO
--********************* // TR_MSSSCL_CHECK_DUPLICATE ************************************

--********************* TR_MSSSIT_CHECK_DUPLICATE ************************************
DROP TRIGGER TR_MSSSIT_CHECK_DUPLICATE 
GO

CREATE TRIGGER TR_MSSSIT_CHECK_DUPLICATE ON MSSIT INSTEAD OF INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @SitExr VARCHAR(30)
	DECLARE @SitSer VARCHAR(10)
	DECLARE @SitNum INT
	DECLARE @SitLin INT
	DECLARE @SitLeq INT
	
	DECLARE @SitCount INT

	SELECT @SitExr = SITEXR, @SitSer = SITSER, @SitNum = SITNDC, @SitLin = SITLIN , @SitLeq = SITLEQ FROM INSERTED
	SELECT @SitCount = Count(*) FROM MSSIT(nolock) WHERE SITEXR = @SitExr AND SITSER = @SitSer AND SITNDC = @SitNum AND SITLIN = @SitLin AND SITLEQ = @SitLeq
	IF @SitCount > 0
		DELETE FROM MSSIT WHERE SITEXR = @SitExr AND SITSER = @SitSer AND SITNDC = @SitNum AND SITLIN = @SitLin AND SITLEQ = @SitLeq

	INSERT INTO MSSIT SELECT * FROM INSERTED
END
GO
--********************* // TR_MSSSIT_CHECK_DUPLICATE ************************************

--********************* TR_MSSSEQ_CHECK_DUPLICATE ************************************
DROP TRIGGER TR_MSSSEQ_CHECK_DUPLICATE 
GO

CREATE TRIGGER TR_MSSSEQ_CHECK_DUPLICATE ON MSSEQ INSTEAD OF INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @SeqExr VARCHAR(30)
	DECLARE @SeqSer VARCHAR(10)
	DECLARE @SeqNum INT
	DECLARE @SeqLin INT
	
	DECLARE @SeqCount INT

	SELECT @SeqExr = SEQEXR, @SeqSer = SEQSER, @SeqNum = SEQNDC, @SeqLin = SEQLIN FROM INSERTED
	SELECT @SeqCount = Count(*) FROM MSSEQ(nolock) WHERE SEQEXR = @SeqExr AND SEQSER = @SeqSer AND SEQNDC = @SeqNum AND SEQLIN = @SeqLin
	IF @SeqCount > 0
		DELETE FROM MSSEQ WHERE SEQEXR = @SeqExr AND SEQSER = @SeqSer AND SEQNDC = @SeqNum AND SEQLIN = @SeqLin

	INSERT INTO MSSEQ SELECT * FROM INSERTED
END
GO
--********************* // TR_MSSSIT_CHECK_DUPLICATE ************************************

--********************* TR_MSSSLN_CHECK_DUPLICATE ************************************
DROP TRIGGER TR_MSSSLN_CHECK_DUPLICATE 
GO

CREATE TRIGGER TR_MSSSLN_CHECK_DUPLICATE ON MSSLN INSTEAD OF INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @SlnExr VARCHAR(30)
	DECLARE @SlnSer VARCHAR(10)
	DECLARE @SlnNum INT
	DECLARE @SlnLEqp INT
	DECLARE @SlnLin INT
	DECLARE @SlnLLote INT
	
	DECLARE @SlnCount INT

	SELECT @SlnExr = SLNEXR, @SlnSer = SLNSER, @SlnNum = SLNNDC, @SlnLEqp = SLNLEQ, @SlnLin = SLNLIN, @SlnLLote = SLNLIL FROM INSERTED
	SELECT @SlnCount = Count(*) FROM MSSLN(nolock) WHERE SLNEXR = @SlnExr AND SLNSER = @SlnSer AND SLNNDC = @SlnNum AND SLNLEQ = @SlnLEqp AND SLNLIN = @SlnLin AND SLNLIL = @SlnLLote
	IF @SlnCount > 0
		DELETE FROM MSSLN WHERE SLNEXR = @SlnExr AND SLNSER = @SlnSer AND SLNNDC = @SlnNum AND SLNLEQ = @SlnLEqp AND SLNLIN = @SlnLin AND SLNLIL = @SlnLLote

	INSERT INTO MSSLN SELECT * FROM INSERTED
END
GO
--********************* // TR_MSSSLN_CHECK_DUPLICATE ************************************

--********************* TR_MSSSMT_CHECK_DUPLICATE ************************************
DROP TRIGGER TR_MSSSMT_CHECK_DUPLICATE 
GO

CREATE TRIGGER TR_MSSSMT_CHECK_DUPLICATE ON MSSMT INSTEAD OF INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @SmtExr VARCHAR(30)
	DECLARE @SmtSer VARCHAR(10)
	DECLARE @SmtNum INT
	DECLARE @SmtLEqp INT
	DECLARE @SmtLin INT
	
	DECLARE @SmtCount INT

	SELECT @SmtExr = SMTEXR, @SmtSer = SMTSER, @SmtNum = SMTNDC, @SmtLEqp = SMTLEQ, @SmtLin = SMTLIN FROM INSERTED
	SELECT @SmtCount = Count(*) FROM MSSMT(nolock) WHERE SMTEXR = @SmtExr AND SMTSER = @SmtSer AND SMTNDC = @SmtNum AND SMTLEQ = @SmtLEqp AND SMTLIN = @SmtLin
	IF @SmtCount > 0
		DELETE FROM MSSMT WHERE SMTEXR = @SmtExr AND SMTSER = @SmtSer AND SMTNDC = @SmtNum AND SMTLEQ = @SmtLEqp AND SMTLIN = @SmtLin

	INSERT INTO MSSMT SELECT * FROM INSERTED
END
GO
--********************* // TR_MSSSMT_CHECK_DUPLICATE ************************************

--********************* TR_MSSSRV_CHECK_DUPLICATE ************************************
DROP TRIGGER TR_MSSSRV_CHECK_DUPLICATE 
GO

CREATE TRIGGER TR_MSSSRV_CHECK_DUPLICATE ON MSSRV INSTEAD OF INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @SrvExr VARCHAR(30)
	DECLARE @SrvSer VARCHAR(10)
	DECLARE @SrvNum INT
	
	DECLARE @SrvCount INT

	SELECT @SrvExr = SRVEXR, @SrvSer = SRVSER, @SrvNum = SRVNDC FROM INSERTED
	SELECT @SrvCount = Count(*) FROM MSSRV(nolock) WHERE SRVEXR = @SrvExr AND SRVSER = @SrvSer AND SRVNDC = @SrvNum
	IF @SrvCount > 0
		DELETE FROM MSSRV WHERE SRVEXR = @SrvExr AND SRVSER = @SrvSer AND SRVNDC = @SrvNum

	INSERT INTO MSSRV SELECT * FROM INSERTED
END
GO
--********************* // TR_MSSSRV_CHECK_DUPLICATE ************************************

--********************* TR_MSSTU1_CHECK_DUPLICATE ************************************
DROP TRIGGER TR_MSSTU1_CHECK_DUPLICATE 
GO

CREATE TRIGGER TR_MSSTU1_CHECK_DUPLICATE ON MSTU1 INSTEAD OF INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @Tu1Ku1 VARCHAR(100)
	DECLARE @Tu1Ku2 VARCHAR(100)
	DECLARE @Tu1Ku3 VARCHAR(100)
	DECLARE @Tu1Ku4 VARCHAR(100)
	
	DECLARE @Tu1Count INT

	SELECT @Tu1Ku1 = TU1KU1, @Tu1Ku2 = TU1KU2, @Tu1Ku3 = TU1KU3, @Tu1Ku4 = TU1KU4 FROM INSERTED
	SELECT @Tu1Count = Count(*) FROM MSTU1(nolock) WHERE TU1KU1 = @Tu1Ku1 AND TU1KU2 = @Tu1Ku2 AND TU1KU3 = @Tu1Ku3 AND TU1KU4 = @Tu1Ku4
	IF @Tu1Count > 0
		DELETE FROM MSTU1 WHERE TU1KU1 = @Tu1Ku1 AND TU1KU2 = @Tu1Ku2 AND TU1KU3 = @Tu1Ku3 AND TU1KU4 = @Tu1Ku4

	INSERT INTO MSTU1 SELECT * FROM INSERTED
END
GO
--********************* // TR_MSSTU1_CHECK_DUPLICATE ************************************

--********************* TR_MSSTU2_CHECK_DUPLICATE ************************************
DROP TRIGGER TR_MSSTU2_CHECK_DUPLICATE 
GO

CREATE TRIGGER TR_MSSTU2_CHECK_DUPLICATE ON MSTU2 INSTEAD OF INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @Tu2Ku1 VARCHAR(100)
	DECLARE @Tu2Ku2 VARCHAR(100)
	DECLARE @Tu2Ku3 VARCHAR(100)
	DECLARE @Tu2Ku4 VARCHAR(100)
	
	DECLARE @Tu2Count INT

	SELECT @Tu2Ku1 = TU2KU1, @Tu2Ku2 = TU2KU2, @Tu2Ku3 = TU2KU3, @Tu2Ku4 = TU2KU4 FROM INSERTED
	SELECT @Tu2Count = Count(*) FROM MSTU2(nolock) WHERE TU2KU1 = @Tu2Ku1 AND TU2KU2 = @Tu2Ku2 AND TU2KU3 = @Tu2Ku3 AND TU2KU4 = @Tu2Ku4
	IF @Tu2Count > 0
		DELETE FROM MSTU2 WHERE TU2KU1 = @Tu2Ku1 AND TU2KU2 = @Tu2Ku2 AND TU2KU3 = @Tu2Ku3 AND TU2KU4 = @Tu2Ku4

	INSERT INTO MSTU2 SELECT * FROM INSERTED
END
GO
--********************* // TR_MSSTU2_CHECK_DUPLICATE ************************************

--********************* TR_MSSTU3_CHECK_DUPLICATE ************************************
DROP TRIGGER TR_MSSTU3_CHECK_DUPLICATE 
GO

CREATE TRIGGER TR_MSSTU3_CHECK_DUPLICATE ON MSTU3 INSTEAD OF INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @Tu3Ku1 VARCHAR(100)
	DECLARE @Tu3Ku2 VARCHAR(100)
	DECLARE @Tu3Ku3 VARCHAR(100)
	DECLARE @Tu3Ku4 VARCHAR(100)
	DECLARE @Tu3Ku5 INT
	DECLARE @Tu3Ku6 INT
	DECLARE @Tu3Ku7 INT
	DECLARE @Tu3Ku8 INT
	
	DECLARE @Tu3Count INT

	SELECT @Tu3Ku1 = TU3KU1, @Tu3Ku2 = TU3KU2, @Tu3Ku3 = TU3KU3, @Tu3Ku4 = TU3KU4, @Tu3Ku5 = TU3KU5, @Tu3Ku6 = TU3KU6, @Tu3Ku7 = TU3KU7, @Tu3Ku8 = TU3KU8 FROM INSERTED
	SELECT @Tu3Count = Count(*) FROM MSTU3(nolock) WHERE TU3KU1 = @Tu3Ku1 AND TU3KU2 = @Tu3Ku2 AND TU3KU3 = @Tu3Ku3 AND TU3KU4 = @Tu3Ku4 AND TU3KU5 = @Tu3Ku5 AND TU3KU6 = @Tu3Ku6 AND TU3KU7 = @Tu3Ku7 AND TU3KU8 = @Tu3Ku8
	IF @Tu3Count > 0
		DELETE FROM MSTU3 WHERE TU3KU1 = @Tu3Ku1 AND TU3KU2 = @Tu3Ku2 AND TU3KU3 = @Tu3Ku3 AND TU3KU4 = @Tu3Ku4 AND TU3KU5 = @Tu3Ku5 AND TU3KU6 = @Tu3Ku6 AND TU3KU7 = @Tu3Ku7 AND TU3KU8 = @Tu3Ku8

	INSERT INTO MSTU3 SELECT * FROM INSERTED
END
GO
--********************* // TR_MSSTU3_CHECK_DUPLICATE ************************************

--********************* TR_MSSTU4_CHECK_DUPLICATE ************************************
DROP TRIGGER TR_MSSTU4_CHECK_DUPLICATE 
GO

CREATE TRIGGER TR_MSSTU4_CHECK_DUPLICATE ON MSTU4 INSTEAD OF INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @Tu4Ku1 VARCHAR(100)
	DECLARE @Tu4Ku2 VARCHAR(100)
	DECLARE @Tu4Ku3 VARCHAR(100)
	DECLARE @Tu4Ku4 VARCHAR(100)
	DECLARE @Tu4Ku5 INT
	DECLARE @Tu4Ku6 INT
	DECLARE @Tu4Ku7 INT
	DECLARE @Tu4Ku8 INT
	
	DECLARE @Tu4Count INT

	SELECT @Tu4Ku1 = TU4KU1, @Tu4Ku2 = TU4KU2, @Tu4Ku3 = TU4KU3, @Tu4Ku4 = TU4KU4, @Tu4Ku5 = TU4KU5, @Tu4Ku6 = TU4KU6, @Tu4Ku7 = TU4KU7, @Tu4Ku8 = TU4KU8 FROM INSERTED
	SELECT @Tu4Count = Count(*) FROM MSTU4(nolock) WHERE TU4KU1 = @Tu4Ku1 AND TU4KU2 = @Tu4Ku2 AND TU4KU3 = @Tu4Ku3 AND TU4KU4 = @Tu4Ku4 AND TU4KU5 = @Tu4Ku5 AND TU4KU6 = @Tu4Ku6 AND TU4KU7 = @Tu4Ku7 AND TU4KU8 = @Tu4Ku8
	IF @Tu4Count > 0
		DELETE FROM MSTU4 WHERE TU4KU1 = @Tu4Ku1 AND TU4KU2 = @Tu4Ku2 AND TU4KU3 = @Tu4Ku3 AND TU4KU4 = @Tu4Ku4 AND TU4KU5 = @Tu4Ku5 AND TU4KU6 = @Tu4Ku6 AND TU4KU7 = @Tu4Ku7 AND TU4KU8 = @Tu4Ku8

	INSERT INTO MSTU4 SELECT * FROM INSERTED
END
GO
--********************* // TR_MSSTU4_CHECK_DUPLICATE ************************************

--********************* TR_MSSOPO_CHECK_DUPLICATE ************************************
DROP TRIGGER TR_MSSOPO_CHECK_DUPLICATE 
GO

CREATE TRIGGER TR_MSSOPO_CHECK_DUPLICATE ON MSOPO INSTEAD OF INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @OpoExr VARCHAR(30)
	DECLARE @OpoSer VARCHAR(10)
	DECLARE @OpoNum INT
	
	DECLARE @OpoCount INT

	SELECT @OpoExr = OPOEXR, @OpoSer = OPOSER, @OpoNum = OPONDC FROM INSERTED
	SELECT @OpoCount = Count(*) FROM MSOPO(nolock) WHERE OPOEXR = @OpoExr AND OPOSER = @OpoSer AND OPONDC = @OpoNum
	IF @OpoCount > 0
		DELETE FROM MSOPO WHERE OPOEXR = @OpoExr AND OPOSER = @OpoSer AND OPONDC = @OpoNum

	INSERT INTO MSOPO SELECT * FROM INSERTED
END
GO
--********************* // TR_MSSOPO_CHECK_DUPLICATE ************************************

--********************* TR_MSSOPL_CHECK_DUPLICATE ************************************
DROP TRIGGER TR_MSSOPL_CHECK_DUPLICATE 
GO

CREATE TRIGGER TR_MSSOPL_CHECK_DUPLICATE ON MSOPL INSTEAD OF INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @OplExr VARCHAR(30)
	DECLARE @OplSer VARCHAR(10)
	DECLARE @OplNum INT
	DECLARE @OplLin INT
	
	DECLARE @OplCount INT

	SELECT @OplExr = OPLEXR, @OplSer = OPLSER, @OplNum = OPLNDC, @OplLin = OPLLIN FROM INSERTED
	SELECT @OplCount = Count(*) FROM MSOPL(nolock) WHERE OPLEXR = @OplExr AND OPLSER = @OplSer AND OPLNDC = @OplNum AND OPLLIN = @OplLin
	IF @OplCount > 0
		DELETE FROM MSOPL WHERE OPLEXR = @OplExr AND OPLSER = @OplSer AND OPLNDC = @OplNum AND OPLLIN = @OplLin

	INSERT INTO MSOPL SELECT * FROM INSERTED
END
GO
--********************* // TR_MSSOPL_CHECK_DUPLICATE ************************************


--********************* TR_MSSDPS_CHECK_DUPLICATE ************************************
DROP TRIGGER TR_MSSDPS_CHECK_DUPLICATE 
GO

CREATE TRIGGER [dbo].[TR_MSSDPS_CHECK_DUPLICATE] ON [dbo].[MSDPS] INSTEAD OF INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @DpsExr VARCHAR(30)
	DECLARE @DpsSer VARCHAR(10)
	DECLARE @DpsNum INT
	DECLARE @DpsCount INT

	SELECT @DpsExr = DPSEXR, @DpsSer = DPSSER, @DpsNum = DPSNUM FROM INSERTED
	SELECT @DpsCount = Count(*) FROM MSDPS(nolock) WHERE DPSEXR = @DpsExr AND DPSSER = @DpsSer AND DPSNUM = @DpsNum
	IF @DpsCount > 0
		DELETE FROM MSDPS WHERE DPSEXR = @DpsExr AND DPSSER = @DpsSer AND DPSNUM = @DpsNum

	INSERT INTO MSDPS SELECT * FROM INSERTED
END
GO
--********************* // TR_MSSDPS_CHECK_DUPLICATE ************************************


--********************* TR_MSSSEQ_CHECK_DUPLICATE ************************************
DROP TRIGGER [dbo].[TR_MSSSEQ_CHECK_DUPLICATE]
GO
CREATE TRIGGER [dbo].[TR_MSSSEQ_CHECK_DUPLICATE] ON [dbo].[MSSEQ] INSTEAD OF INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @SEQEXR VARCHAR(30)
	DECLARE @SEQSER VARCHAR(10)
	DECLARE @SEQNDC INT
	DECLARE @SEQLIN INT

	DECLARE @SEQCount INT

	SELECT @SEQEXR = SEQEXR, @SEQSER = SEQSER, @SEQNDC = SEQNDC, @SEQLIN = SEQLIN FROM INSERTED
	SELECT @SEQCount = Count(*) FROM MSSEQ(nolock) WHERE SEQEXR = @SEQEXR AND SEQSER = @SEQSER AND SEQNDC = @SEQNDC AND SEQLIN = @SEQLIN
	IF @SEQCount > 0
		DELETE FROM MSSEQ WHERE SEQEXR = @SEQEXR AND SEQSER = @SEQSER AND SEQNDC = @SEQNDC AND SEQLIN = @SEQLIN

	INSERT INTO MSSEQ SELECT * FROM INSERTED
END
GO

--********************* // TR_MSSSEQ_CHECK_DUPLICATE ************************************


--********************* TR_MSSSIT_CHECK_DUPLICATE ************************************

DROP TRIGGER [dbo].[TR_MSSSIT_CHECK_DUPLICATE]
GO
CREATE TRIGGER [dbo].[TR_MSSSIT_CHECK_DUPLICATE] ON [dbo].[MSSIT] INSTEAD OF INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @SITEXR VARCHAR(30)
	DECLARE @SITSER VARCHAR(10)
	DECLARE @SITNDC INT
	DECLARE @SITLIN INT

	DECLARE @SITCount INT

	SELECT @SITEXR = SITEXR, @SITSER = SITSER, @SITNDC = SITNDC, @SITLIN = SITLIN FROM INSERTED
	SELECT @SITCount = Count(*) FROM MSSIT(nolock) WHERE SITEXR = @SITEXR AND SITSER = @SITSER AND SITNDC = @SITNDC AND SITLIN = @SITLIN
	IF @SITCount > 0
		DELETE FROM MSSIT WHERE SITEXR = @SITEXR AND SITSER = @SITSER AND SITNDC = @SITNDC AND SITLIN = @SITLIN

	INSERT INTO MSSIT SELECT * FROM INSERTED
END
GO
--********************* // TR_MSSSIT_CHECK_DUPLICATE ************************************


--********************* TR_MSSSMT_CHECK_DUPLICATE ************************************
DROP TRIGGER [dbo].[TR_MSSSMT_CHECK_DUPLICATE]
GO
CREATE TRIGGER [dbo].[TR_MSSSMT_CHECK_DUPLICATE] ON [dbo].[MSSMT] INSTEAD OF INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @SMTEXR VARCHAR(30)
	DECLARE @SMTSER VARCHAR(10)
	DECLARE @SMTNDC INT
	DECLARE @SMTLEQ INT
	DECLARE @SMTLIN INT

	DECLARE @SMTCount INT

	SELECT @SMTEXR = SMTEXR, @SMTSER = SMTSER, @SMTNDC = SMTNDC, @SMTLEQ = SMTLEQ ,@SMTLIN = SMTLIN FROM INSERTED
	SELECT @SMTCount = Count(*) FROM MSSMT(nolock) WHERE SMTEXR = @SMTEXR AND SMTSER = @SMTSER AND SMTNDC = @SMTNDC AND SMTLEQ = @SMTLEQ AND SMTLIN = @SMTLIN
	IF @SMTCount > 0
		DELETE FROM MSSMT WHERE SMTEXR = @SMTEXR AND SMTSER = @SMTSER AND SMTNDC = @SMTNDC AND SMTLEQ = @SMTLEQ AND SMTLIN = @SMTLIN

	INSERT INTO MSSMT SELECT * FROM INSERTED
END
GO
--********************* // TR_MSSSMT_CHECK_DUPLICATE ************************************


--********************* TR_MSSSRV_CHECK_DUPLICATE ************************************
DROP TRIGGER [dbo].[TR_MSSSRV_CHECK_DUPLICATE]
GO
CREATE TRIGGER [dbo].[TR_MSSSRV_CHECK_DUPLICATE] ON [dbo].[MSSRV] INSTEAD OF INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @SRVEXR VARCHAR(30)
	DECLARE @SRVSER VARCHAR(10)
	DECLARE @SRVNDC INT

	DECLARE @SRVCount INT

	SELECT @SRVEXR = SRVEXR, @SRVSER = SRVSER, @SRVNDC = SRVNDC FROM INSERTED
	SELECT @SRVCount = Count(*) FROM MSSRV(nolock) WHERE SRVEXR = @SRVEXR AND SRVSER = @SRVSER AND SRVNDC = @SRVNDC
	IF @SRVCount > 0
		DELETE FROM MSSRV WHERE SRVEXR = @SRVEXR AND SRVSER = @SRVSER AND SRVNDC = @SRVNDC

	INSERT INTO MSSRV SELECT * FROM INSERTED
END

GO
--********************* // TR_MSSSRV_CHECK_DUPLICATE ************************************

--********************* TR_MSSVIS_CHECK_DUPLICATE ************************************
DROP TRIGGER TR_MSSVIS_CHECK_DUPLICATE 
GO

CREATE TRIGGER TR_MSSVIS_CHECK_DUPLICATE ON MSVIS INSTEAD OF INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @DataIni VARCHAR(8)
	DECLARE @HoraIni VARCHAR(6)
	DECLARE @Vnd VARCHAR(50)
	
	DECLARE @DiaCount INT

	SELECT @DataIni = VISDTI, @HoraIni = VISHRI, @Vnd = VISVND FROM INSERTED
	SELECT @DiaCount = Count(*) FROM MSVIS(nolock) WHERE VISDTI = @DataIni AND VISHRI = @HoraIni AND VISVND = @Vnd
	IF @DiaCount > 0
		DELETE FROM MSVIS WHERE VISDTI = @DataIni AND VISHRI = @HoraIni AND VISVND = @Vnd

	INSERT INTO MSVIS SELECT * FROM INSERTED
END
GO
--********************* // TR_MSSVIS_CHECK_DUPLICATE ************************************

--********************* TR_MSSLOG_CHECK_DUPLICATE ************************************
DROP TRIGGER TR_MSSLOG_CHECK_DUPLICATE 
GO

CREATE TRIGGER TR_MSSLOG_CHECK_DUPLICATE ON MSLOG INSTEAD OF INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @Stamp VARCHAR(30)
	DECLARE @LogCount INT

	SELECT @Stamp = LOGSTP FROM INSERTED
	SELECT @LogCount = Count(*) FROM MSLOG(nolock) WHERE LOGSTP = @Stamp
	IF @LogCount > 0
		DELETE FROM MSLOG WHERE LOGSTP = @Stamp

	INSERT INTO MSLOG SELECT * FROM INSERTED
END
GO
--********************* // TR_MSSLOG_CHECK_DUPLICATE ************************************

--********************* TR_MSSFOT_CHECK_DUPLICATE ************************************
DROP TRIGGER TR_MSSFOT_CHECK_DUPLICATE 
GO

CREATE TRIGGER TR_MSSFOT_CHECK_DUPLICATE ON MSFOT INSTEAD OF INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @FOTEXR VARCHAR(60)
	DECLARE @FOTTPD VARCHAR(20)
	DECLARE @FOTSER VARCHAR(20)
	DECLARE @FOTNDC INT
	DECLARE @FOTLIN INT
	DECLARE @FOTLIL INT
	DECLARE @FOTVND VARCHAR(50) 
	
	DECLARE @Count INT

	SELECT @FOTEXR = FOTEXR, @FOTTPD = FOTTPD, @FOTSER = FOTSER, @FOTNDC = FOTNDC, @FOTLIN = FOTLIN, @FOTLIL = FOTLIL, @FOTVND = FOTVND FROM INSERTED
	SELECT @Count = Count(*) FROM MSFOT(nolock) WHERE FOTEXR = @FOTEXR AND FOTTPD = @FOTTPD AND FOTSER = @FOTSER AND FOTNDC = @FOTNDC AND FOTLIN = @FOTLIN AND FOTLIL = @FOTLIL AND FOTVND = @FOTVND
	IF @Count > 0
		DELETE FROM MSFOT WHERE FOTEXR = @FOTEXR AND FOTTPD = @FOTTPD AND FOTSER = @FOTSER AND FOTNDC = @FOTNDC AND FOTLIN = @FOTLIN AND FOTLIL = @FOTLIL AND FOTVND = @FOTVND

	INSERT INTO MSFOT SELECT * FROM INSERTED
END
GO
--********************* // TR_MSSFOT_CHECK_DUPLICATE ************************************

--********************* TR_MSSAGR_CHECK_DUPLICATE ************************************
DROP TRIGGER TR_MSSAGR_CHECK_DUPLICATE 
GO

CREATE TRIGGER TR_MSSAGR_CHECK_DUPLICATE ON MSAGR INSTEAD OF INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @Stamp VARCHAR(40)
	DECLARE @LogCount INT

	SELECT @Stamp = AGRSTP FROM INSERTED
	SELECT @LogCount = Count(*) FROM MSAGR(nolock) WHERE AGRSTP = @Stamp
	IF @LogCount > 0
		DELETE FROM MSAGR WHERE AGRSTP = @Stamp

	INSERT INTO MSAGR SELECT * FROM INSERTED
END
GO
--********************* // TR_MSSAGR_CHECK_DUPLICATE ************************************

--********************* TR_MSSBCC_CHECK_DUPLICATE ************************************
DROP TRIGGER TR_MSSBCC_CHECK_DUPLICATE 
GO

CREATE TRIGGER TR_MSSBCC_CHECK_DUPLICATE ON MSBCC INSTEAD OF INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @BCCEXR VARCHAR(30)
	DECLARE @BCCSER VARCHAR(10)
	DECLARE @BCCNDC INT
	DECLARE @Terminal INT
	
	DECLARE @DiaCount INT

	SELECT @BCCEXR = BCCEXR, @BCCSER = BCCSER, @BCCNDC = BCCNDC, @Terminal = BCCTERM FROM INSERTED
	SELECT @DiaCount = Count(*) FROM MSBCC(nolock) WHERE BCCEXR = @BCCEXR AND BCCSER = @BCCSER AND BCCNDC = @BCCNDC AND BCCTERM = @Terminal
	IF @DiaCount > 0
		DELETE FROM MSBCC WHERE BCCEXR = @BCCEXR AND BCCSER = @BCCSER AND BCCNDC = @BCCNDC AND BCCTERM = @Terminal

	INSERT INTO MSBCC SELECT * FROM INSERTED
END
GO
--********************* // TR_MSSBCL_CHECK_DUPLICATE ************************************

--********************* TR_MSSBCL_CHECK_DUPLICATE ************************************
DROP TRIGGER TR_MSSBCL_CHECK_DUPLICATE 
GO

CREATE TRIGGER TR_MSSBCL_CHECK_DUPLICATE ON MSBCL INSTEAD OF INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @BCLEXR VARCHAR(30)
	DECLARE @BCLSER VARCHAR(10)
	DECLARE @BCLNDC INT
	DECLARE @BCLLIN INT
	DECLARE @Terminal INT
	
	DECLARE @DiaCount INT

	SELECT @BCLEXR = BCLEXR, @BCLSER = BCLSER, @BCLNDC = BCLNDC, @BCLLIN = BCLLIN, @Terminal = BCLTERM FROM INSERTED
	SELECT @DiaCount = Count(*) FROM MSBCL(nolock) WHERE BCLEXR = @BCLEXR AND BCLSER = @BCLSER AND BCLNDC = @BCLNDC AND BCLLIN = @BCLLIN AND BCLTERM = @Terminal
	IF @DiaCount > 0
		DELETE FROM MSBCL WHERE BCLEXR = @BCLEXR AND BCLSER = @BCLSER AND BCLNDC = @BCLNDC AND BCLLIN = @BCLLIN AND BCLTERM = @Terminal

	INSERT INTO MSBCL SELECT * FROM INSERTED
END
GO
--********************* // TR_MSSBCL_CHECK_DUPLICATE ************************************